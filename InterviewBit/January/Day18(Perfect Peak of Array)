class Solution:
    # @param A : list of integers
    # @return an integer
    def perfectPeak(self, A):
        n = len(A)
        if n < 3:  # Corner case: Not enough elements to satisfy the condition
            return 0

        # Create arrays to store max on the left and min on the right
        left_max = [0] * n
        right_min = [0] * n

        # Fill left_max
        left_max[0] = A[0]
        for i in range(1, n):
            left_max[i] = max(left_max[i - 1], A[i])

        # Fill right_min
        right_min[n - 1] = A[n - 1]
        for i in range(n - 2, -1, -1):
            right_min[i] = min(right_min[i + 1], A[i])

        # Check for the perfect peak element
        for i in range(1, n - 1):
            if A[i] > left_max[i - 1] and A[i] < right_min[i + 1]:
                return 1

        return 0
