from typing import List

class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        # Define the set of vowels
        vowels = {'a', 'e', 'i', 'o', 'u'}
        
        # Create a list to mark valid strings
        valid_count = [0] * len(words)
        
        # Check each word if it starts and ends with a vowel
        for i, word in enumerate(words):
            if word[0] in vowels and word[-1] in vowels:
                valid_count[i] = 1
        
        # Create a prefix sum array
        prefix_sum = [0] * (len(words) + 1)
        for i in range(1, len(words) + 1):
            prefix_sum[i] = prefix_sum[i - 1] + valid_count[i - 1]
        
        # Prepare the result for each query
        result = []
        for li, ri in queries:
            count = prefix_sum[ri + 1] - prefix_sum[li]
            result.append(count)
        
        return result

# Example usage:
solution = Solution()
words = ["aba", "bcb", "ece", "aa", "e"]
queries = [[0, 2], [1, 4], [1, 1]]
print(solution.vowelStrings(words, queries))  # Output: [2, 3, 0]

words2 = ["a", "e", "i"]
queries2 = [[0, 2], [0, 1], [2, 2]]
print(solution.vowelStrings(words2, queries2))  # Output: [3, 2, 1]
